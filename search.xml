<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>技术博客启程</title>
    <url>/2025/02/16/hello-world/</url>
    <content><![CDATA[<p>从今天开始看<a href="https://xiaolincoding.com/">小林Coding</a>学八股。<br>规划分为三块：</p>
<ul>
<li>国内职场：春招提前查看行情，有机会能面试的可以蹭经验</li>
<li>国外职场：主要LinkedIn看，争取找一个暑期实习</li>
<li>技术学习：针对简历内容进行针对性复习，争取可以改一两个开源项目</li>
</ul>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>Other</tag>
      </tags>
  </entry>
  <entry>
    <title>Twilight项目开发日记（1）</title>
    <url>/2025/02/19/Twilight%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%881%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>今天开始随缘记录重现毕设的工作与遇到的一些坑。<br>项目名称是Twilight，旨在使用<strong>SpringBoot+Neo4j</strong>实现个性化学习资源的推荐。</p>
</blockquote>
<hr>
<h2 id="今日遇到的坑"><a href="#今日遇到的坑" class="headerlink" title="今日遇到的坑"></a>今日遇到的坑</h2><h3 id="1-Neo4j无法使用GDS"><a href="#1-Neo4j无法使用GDS" class="headerlink" title="1. Neo4j无法使用GDS"></a>1. Neo4j无法使用GDS</h3><p>一开始显示无法调用GDS的procedure（如<code>gds.graphSage.train</code>)，初步检查的时候以为是自己调用方法错了，后来通过检查和问GPT得到以下原因:</p>
<ol>
<li>数据库未启用Neo4j GDS。这个是第一次运行时最常见的问题，需要在Neo4j Desktop右侧直接勾选install就行。</li>
<li>Neo4j GDS的版本不支持使用这些功能。依旧以这个train方法为例，我使用的Neo4j GDS 2.13.2版本不支持，因为它是一个高级功能而非正式API，需要使用<code>GDS Enterprise</code>版本。<br>根据建议，我使用了FastRP替代GraphSAGE进行近似GNN训练。</li>
</ol>
<h3 id="2-SpringBoot项目编译时报错：Java：找不到符号"><a href="#2-SpringBoot项目编译时报错：Java：找不到符号" class="headerlink" title="2. SpringBoot项目编译时报错：Java：找不到符号"></a>2. SpringBoot项目编译时报错：<code>Java：找不到符号</code></h3><p>这是卡了我最久也是最不应该的问题。因为没有遇到过，所以先去搜了一下，网上教程总结下来无外乎这些方法：<a href="https://cloud.tencent.com/developer/article/2100014">传送门</a>，但很不幸都没奏效。</p>
<p>后来我注意到所有涉及到Model层类Get&#x2F;Set方法的语句都报了这个错，说明大概率就是Model类的定义出了问题。 通过注释掉@Data、@Getter、@Setter这些Lombok的注解(Annotation)再手写方法对比发现，确实是Lombok的锅。<br>于是从Lombok是否禁用、Lombok版本是否兼容等方面进行检查，最后通过调整Maven配置文件内容解决。</p>
<h3 id="3-JWT密钥长度问题"><a href="#3-JWT密钥长度问题" class="headerlink" title="3. JWT密钥长度问题"></a>3. JWT密钥长度问题</h3><p>JWT说实话在此之前了解程度不深，所以踩了一些坑。</p>
<p>首先来看报错：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">io.jsonwebtoken.security.WeakKeyException:</span><br><span class="line">The specified key byte array is 80 bits which is not secure enough for any JWT HMAC-SHA algorithm.</span><br></pre></td></tr></table></figure>

<p>按照字面意思，发现应该是密钥部分有些问题，向GPT提问也得到了肯定，直接原因是：JWT密钥长度不足256位导致JWT工具类无法实例化，因此利用JWT实现过滤的过滤器依赖注入失败导致SpringBoot启动失败。</p>
<p>因此解决方案也很简单：手动编写或者自动生成一个256位的密钥。此处选择使用<code>Keys.secretKeyFor(SignatureAlgorithm.HS256)</code>生成一个密钥，顺利解决问题。</p>
<p>此外GPT在回答时提供了一个其他的方案，就是在application.properties配置文件里添加JWT配置，然后使用@Value读取。</p>
<hr>
<h2 id="今日进度："><a href="#今日进度：" class="headerlink" title="!!今日进度："></a>!!今日进度：</h2><ol>
<li>编写了与User、Resource等主体相关的Model、Repository、Service、Controller的部分代码；</li>
<li>实现了JWT+Spring Security进行的鉴权；</li>
<li>已编写Redis和Neo4j的相关代码，包括借助Redis Stream和@Scheduled实现异步更新和缓存清理；</li>
<li>完成Neo4j数据库内部的简单初始化。</li>
</ol>
]]></content>
      <tags>
        <tag>Twilight</tag>
        <tag>Neo4j</tag>
        <tag>Java</tag>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>求职日记</title>
    <url>/2025/02/17/%E6%B1%82%E8%81%8C/</url>
    <content><![CDATA[<p>今天迈出了LinkedIn求职的第一步，投大公司准备看看会不会直接简历筛and有没有面试的机会。</p>
<p>当前已申请岗位：</p>
<ul>
<li>Cloudflare：Software Engineer Intern (Summer 2025) - London (Hybrid)</li>
<li>Bending Spoons: Software Engineer Intern - Oxfordshire (Remote) （已拒，简历筛）</li>
</ul>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>Job</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker初体验小记</title>
    <url>/2025/02/20/Docker%E5%88%9D%E4%BD%93%E9%AA%8C%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<p>今天心血来潮简单了解了一下基于Linux内核的大名鼎鼎的Docker，顺便把Redis和Neo4j服务给放容器里了。</p>
<p>先来看看Docker是什么，应该怎么理解（以下大量个人理解）：<br>Docker从字面意思来看就是码头工人，起到的功能也就是码头集散中心标准化集装箱的功能。一言以蔽之，其主要作用是可以<strong>让软件&#x2F;应用能够在任何环境下都稳定运行</strong>。</p>
<p>那么Docker是如何实现这一作用的？Docker提供了<code>容器</code>的概念（写的时候莫名其妙想到替身是怎么回事），可以类比为标准化的集装箱，容器间相互隔离。</p>
<p>出现Docker前，一个应用想要测试就得配置好各种环境（操作系统、Java版本等），导致很难进行迁移部署；使用Docker后，所有的应用都装进Docker容器内，任何操作系统、服务器的差异都不会影响其正常运行。</p>
<p>另外很值得注意的一点是：<strong>Docker和虚拟机有什么区别？</strong></p>
<p>首先明确一点，<strong>Docker≠虚拟机</strong>，毕竟Docker最常用的宣传语就是“虚拟机需要数分钟启动，而Docker容器只需要数十毫秒。”</p>
<p>从区别上来看，虚拟机需要在主操作系统之上运行多个从操作系统，且虚拟机会占用大量的磁盘空间、CPU与内存，实现<strong>对硬件资源的虚拟化</strong>；与之相对，Docker<strong>无需运行臃肿的客户机操作系统</strong>，Docker使用Docker守护进程（Docker Daemon）实现对容器的管理，依赖的加载以<code>镜像</code>的形式打包，容器则基于镜像生成，<strong>直接使用硬件资源</strong>。</p>
<p>两者的实现原理框架示意图如下：<br><img src="/images%5CDocker%E5%8E%9F%E7%90%86%E7%A4%BA%E6%84%8F.webp" alt="Docker原理示意"><br><img src="/images%5CVM%E5%8E%9F%E7%90%86%E7%A4%BA%E6%84%8F.webp" alt="VM原理示意"></p>
<p>除此之外，一些简单的介绍我阅读了这篇文章：<a href="https://www.zhihu.com/question/458020679">docker技术有什么用？</a></p>
<p>现在提一嘴如何使用Docker来管理Redis、Neo4j。</p>
<p>首先<a href="https://www.docker.com/">下载Docker</a>，安装好Docker Desktop之后需要重启。</p>
<p>然后使用终端管理员，或是内置的命令行工具拉取所需服务的镜像，此处以我所需的Neo4j v5.21.0为例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull neo4j:5.21.0</span><br></pre></td></tr></table></figure>

<p>然后运行该容器，其中首行的<code>-d</code>代表后台运行容器。注意此处可能遇到不能执行多行的问题，可以使用内置命令行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name neo4j \</span><br><span class="line">  -p 7474:7474 -p 7687:7687 \</span><br><span class="line">  -e NEO4J_AUTH=neo4j/password \</span><br><span class="line">  -v <span class="variable">$HOME</span>/neo4j/data:/data \</span><br><span class="line">  -v <span class="variable">$HOME</span>/neo4j/logs:/logs \</span><br><span class="line">  neo4j:5.21.0</span><br></pre></td></tr></table></figure>

<p>执行完成后，可以在Docker Desktop的容器列表看到新增了一个容器，同样也可以使用命令查看：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<p>这样就完成了在容器中托管Neo4j服务的效果，目前实测可以正常运行。</p>
<p><em>另附：docker和微服务架构紧密相关。在此架构中，可以简单理解为应用程序被拆封为多个小型、解耦的微服务，各自关注特定业务功能，可以独立地进行开发、测试、部署、扩展，这与Docker的容器化思想吻合。</em></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
</search>
